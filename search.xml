<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Pycharm的破解安装以及配置matplotlib库与cv2库</title>
    <url>/post/337df376.html</url>
    <content><![CDATA[<h1 id="Pycharm的破解安装以及配置matplotlib库与cv2库"><a href="#Pycharm的破解安装以及配置matplotlib库与cv2库" class="headerlink" title="Pycharm的破解安装以及配置matplotlib库与cv2库"></a>Pycharm的破解安装以及配置matplotlib库与cv2库</h1><h2 id="2022全版本Pycharm的破解安装"><a href="#2022全版本Pycharm的破解安装" class="headerlink" title="2022全版本Pycharm的破解安装"></a>2022全版本Pycharm的破解安装</h2><p>PyCharm永久破解激活：</p>
<p>破解工具网盘链接：<a href="https://pan.baidu.com/s/1zBOWQrNRfgvvsgpHk_uBXg?pwd=ihwa">https://pan.baidu.com/s/1zBOWQrNRfgvvsgpHk_uBXg?pwd=ihwa</a> </p>
<p>对应破解工具的PyCharm激活码：<a href="https://chenjunan.top/img/activate/pycharm-new.txt">https://chenjunan.top/img/activate/pycharm-new.txt</a></p>
<p>安装教程：<a href="https://chenjunan.top/detail/Detail?id=34">https://chenjunan.top/detail/Detail?id=34</a></p>
<p>具体安装过程见安装教程连接</p>
<p>安装需要注意的几点：</p>
<p>解压后的破解工具以及pycharm的文件夹均不要移动或删除，否则会导致破解失效</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/asynccode" alt="img"></p>
<h2 id="Pycharm配置Python环境"><a href="#Pycharm配置Python环境" class="headerlink" title="Pycharm配置Python环境"></a>Pycharm配置Python环境</h2><p>刚刚下载安装好的Pycharm是没有Python环境的</p>
<p>点击主界面上file-&gt;Settings</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205155301.png" alt="image-20230425205155301"></p>
<p>选择Project下的Python Interpreter，没有安装过Python环境的点击Add  Interpreter下选择Add local  Interpreter。我这里是之前就已经安装好了的</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205303570.png" alt="image-20230425205303570"></p>
<p>没有安装过Python环境的是这个样子的：</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205335006.png" alt="image-20230425205335006"></p>
<p>弹出界面</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205358464.png" alt="image-20230425205358464"></p>
<p>选择安装路径，点击三角形符号可选择安装版本</p>
<p>这样pycharm的python环境就安装好了</p>
<h2 id="matplotlib库的安装"><a href="#matplotlib库的安装" class="headerlink" title="matplotlib库的安装"></a>matplotlib库的安装</h2><p>在安装matplotlib库与cv2库之前，先配置pip,方便后续安装。</p>
<p>在电脑中找到刚才安装的python位置</p>
<p>一般的位置基本不会变，都差不多，复制下图中pip.exe的路径</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205431066.png" alt="image-20230425205431066"></p>
<p>打开电脑环境属性，配置环境</p>
<p>选择path,点击编辑</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205451992.png" alt="image-20230425205451992"></p>
<p>点击新建，将刚才复制的路径粘贴到这里</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205512195.png" alt="image-20230425205512195"></p>
<p>win+R,输入cmd打开控制台</p>
<p>输入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install matplotlib </span><br></pre></td></tr></table></figure>

<p>等待安装完成即可;</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205557819.png" alt="image-20230425205557819"></p>
<p>安装完成:</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205620023.png" alt="image-20230425205620023"></p>
<p>测试代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">plt.ylabel(<span class="string">&#x27;numbers&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>运行结果;</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205645892.png" alt="image-20230425205645892"></p>
<p>如果出现报错，没有成功运行：</p>
<p>回到之前安装Python的那个页面</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205708517.png" alt="image-20230425205708517"></p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205720920.png" alt="image-20230425205720920"></p>
<p>虽然我也不知道为什么，但改为3.3.0的版本就真的能运行，其他的版本没有去试过，不知道可不可以</p>
<p>改版本的过程：</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205740654.png" alt="image-20230425205740654"></p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205753755.png" alt="image-20230425205753755"></p>
<p>点击Install Package 等待安装成功，pycharm弹出提示</p>
<p>重启pycharm</p>
<p>这样就能正常运行使用matplotlib库</p>
<p>附上官网连接： <a href="https://matplotlib.org/stable/users/getting_started/index.html#installation-quick-start">https://matplotlib.org/stable/users/getting_started/index.html#installation-quick-start</a> </p>
<h2 id="cv2库的安装"><a href="#cv2库的安装" class="headerlink" title="cv2库的安装"></a>cv2库的安装</h2><p>win+R,输入cmd打开控制台</p>
<p>输入命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install opencv-python  </span><br></pre></td></tr></table></figure>

<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205811569.png" alt="image-20230425205811569"></p>
<p>则安装成功</p>
<p>重启pycharm</p>
<p>运行得</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230425205828595.png" alt="image-20230425205828595"></p>
]]></content>
      <categories>
        <category>百宝箱</category>
      </categories>
      <tags>
        <tag>软件安装与配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda表达式介绍</title>
    <url>/post/c3c20d9.html</url>
    <content><![CDATA[<h2 id="函数式编程思想"><a href="#函数式编程思想" class="headerlink" title="函数式编程思想"></a>函数式编程思想</h2><p>Java从诞生之日起就一直倡导“一切皆对象”，在Java语言中面向对象（OOP）编程就是一切，但是随着Python和Scala等语言的崛起和新技术的挑战，Java也不得不做出调整以便支持更加广泛的技术要求，即Java语言不但支持OOP还支持OOF（面向函数编程）。</p>
<p>JDK1.8引入Lambda表达式之后，Java语言也开始支持函数式编程，但是Lambda表达式不是Java语言最早使用的，目前C++、C#、Python、Scala等语言都支持Lambda表示。</p>
<p>Lambda表达式是JDK1.8的一个新特性，可以取代大部分的匿名内部类，以便写出更优雅的Java代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。</p>
<ul>
<li><p>面向对象的思想 </p>
</li>
<li><ul>
<li>做一件事情，找一个能解决这个事情的对象，然后调用对象的方法，最终完成事情。</li>
</ul>
</li>
<li><p>函数式编程思想 </p>
</li>
<li><ul>
<li>只要能获得结果，谁去做的，怎么做的都不重要，重视的是结果，不重视实现过程。</li>
</ul>
</li>
</ul>
<p>JDK1.8中的Lambda表达式就是一个函数式接口的实例，这就是Lambda表达式和函数式接口的关系。也就是说，<strong>只要一个对象是函数式接口的实例，那么该对象就可以使用Lambda表达式来表示</strong>。</p>
<h2 id="对于函数式接口的理解"><a href="#对于函数式接口的理解" class="headerlink" title="对于函数式接口的理解"></a>对于函数式接口的理解</h2><p>能够使用Lambda表达式的一个很重要的依据便是必须有相应的函数式接口，所谓的函数式接口，指的就是“一个接口中有且只能有一个抽象方法”。也就是说，<strong>如果一个接口只有一个抽象方法，那么该接口就是一个函数式接口。</strong></p>
<p>如果我们在接口上声明了 @FunctionalInterface 注解，那么编译器就会按照函数式接口的定义来要求该接口，也就是该接口中有且只能定义一个抽象方法，如果该接口中定义了多个或0个抽象方法，则程序编译时就会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="comment">// 在函数式接口中，我们有且只能定义一个抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showFly</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 但是，可以定义任意多个默认方法或静态方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JDK1.8之后，接口还可以定义默认方法和静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外，从某种意义上来说，只要你保证你的接口中有且只有一个抽象方法，则接口中没有使用 @FunctionalInterface 注解来标注，那么该接口也依旧属于函数式接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 没有使用<span class="doctag">@FunctionalInterface</span>标注的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Flyable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showFly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用lambda表示来表示Flyable接口的实例</span></span><br><span class="line">        <span class="type">Flyable</span> <span class="variable">flyable</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小鸟自由自在的飞翔&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 调用Flyable接口的实例的showFly()方法</span></span><br><span class="line">        flyable.showFly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Lambda表达式与匿名内部类的区别：</strong></p>
<ul>
<li><p>所需类型不同：</p>
</li>
<li><ul>
<li>匿名内部类：可以是接口，抽象类，具体类</li>
<li>Lambda表达式：<strong>只能是接口</strong></li>
</ul>
</li>
<li><p>使用限制不同：</p>
</li>
<li><ul>
<li>如果接口中<strong>有且仅有一个抽象方法</strong>，可以使用Lambda表达式，也可以使用匿名内部类。</li>
<li>如果接口中有多个抽象方法，则就只能使用匿名内部类，而不能使用Lambda表达式。</li>
</ul>
</li>
<li><p>实现原理不同：</p>
</li>
<li><ul>
<li>匿名内部类：编译之后，会生成一个单独的.class字节码文件。</li>
<li>Lambda表达式：编译之后，没有生成一个单独的.class字节码文件。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda表达式的基本使用</title>
    <url>/post/79fbda77.html</url>
    <content><![CDATA[<h2 id="语法进一步精简规则"><a href="#语法进一步精简规则" class="headerlink" title="语法进一步精简规则"></a>语法进一步精简规则</h2><p>在原本的语法基础上，Lambda表达式已经相对来说比较精简了，但在以下的应用场景中，我们就可以对Lambda表达式的语法进行精简，场景如下：</p>
<ol>
<li>形参类型可以省略，如果需要省略，则每个形参的类型都要省略。</li>
<li>如果形参列表中只存在一个形参，那么形参类型和小括号都可以省略。</li>
<li>如果方法体当中只有一行语句，那么方法体的大括号也可以省略。</li>
<li>如果方法体中只有一条return语句，那么大括号可以省略，且必须去掉return关键字。</li>
</ol>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>结合更为精简的语法规则对Lambda表达式进行运用</p>
<h3 id="无返回值函数式接口"><a href="#无返回值函数式接口" class="headerlink" title="无返回值函数式接口"></a>无返回值函数式接口</h3><h4 id="情况一：无返回值无参数"><a href="#情况一：无返回值无参数" class="headerlink" title="情况一：无返回值无参数"></a>情况一：无返回值无参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">NoParameterNoReturn</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NoParameterNoReturn</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参无返回值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj1.test();</span><br><span class="line"><span class="type">NoParameterNoReturn</span> <span class="variable">obj2</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;无参无返回值&quot;</span>);</span><br><span class="line">obj2.test();</span><br></pre></td></tr></table></figure>

<h4 id="情况二：无返回值一个参数"><a href="#情况二：无返回值一个参数" class="headerlink" title="情况二：无返回值一个参数"></a><strong>情况二：无返回值一个参数</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OneParameterNoReturn</span> <span class="variable">obj21</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OneParameterNoReturn</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无返回值一个参数 --&gt; &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj21.test(<span class="number">10</span>);</span><br><span class="line"><span class="type">OneParameterNoReturn</span> <span class="variable">obj22</span> <span class="operator">=</span> num -&gt; System.out.println(<span class="string">&quot;无返回值一个参数 --&gt; &quot;</span> + num);</span><br><span class="line">obj22.test(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<h4 id="情况三：无返回值多个参数"><a href="#情况三：无返回值多个参数" class="headerlink" title="情况三：无返回值多个参数"></a><strong>情况三：无返回值多个参数</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MoreParameterNoReturn</span> <span class="variable">obj31</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MoreParameterNoReturn</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String str1, String str2)</span> &#123;</span><br><span class="line">        System.out.println(str1 + <span class="string">&quot; : &quot;</span> + str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj31.test(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="type">MoreParameterNoReturn</span> <span class="variable">obj32</span> <span class="operator">=</span> (str1, str2) -&gt; System.out.println(str1 + <span class="string">&quot; : &quot;</span> + str2);</span><br><span class="line">obj32.test(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="有返回值函数接口"><a href="#有返回值函数接口" class="headerlink" title="有返回值函数接口"></a>有返回值函数接口</h3><h4 id="情况一：有返回值无参数"><a href="#情况一：有返回值无参数" class="headerlink" title="情况一：有返回值无参数"></a>情况一：有返回值无参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">NoParameterHasReturn</span> <span class="variable">obj41</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NoParameterHasReturn</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">520</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">NoParameterHasReturn</span> <span class="variable">obj42</span> <span class="operator">=</span> () -&gt; <span class="number">520</span>;</span><br></pre></td></tr></table></figure>

<h4 id="情况二：有返回值一个参数"><a href="#情况二：有返回值一个参数" class="headerlink" title="情况二：有返回值一个参数"></a><strong>情况二：有返回值一个参数</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">OneParameterHasReturn</span> <span class="variable">obj51</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OneParameterHasReturn</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="type">double</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;传入的小数为：&quot;</span> + num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(obj51.test(<span class="number">520.0</span>));</span><br><span class="line"><span class="type">OneParameterHasReturn</span> <span class="variable">obj52</span> <span class="operator">=</span> num -&gt; <span class="string">&quot;传入的小数为：&quot;</span> + num;</span><br><span class="line">System.out.println(obj52.test(<span class="number">520.0</span>));</span><br></pre></td></tr></table></figure>

<h4 id="情况三：有返回值多个参数"><a href="#情况三：有返回值多个参数" class="headerlink" title="情况三：有返回值多个参数"></a>情况三：有返回值多个参数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MoreParameterHasReturn</span> <span class="variable">obj61</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MoreParameterHasReturn</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;运算的结果为：&quot;</span> + (num1 + num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(obj61.test(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line"><span class="type">MoreParameterHasReturn</span> <span class="variable">obj62</span> <span class="operator">=</span> (num1, num2) -&gt; <span class="string">&quot;运算的结果为：&quot;</span> + (num1 + num2);</span><br><span class="line">System.out.println(obj62.test(<span class="number">10</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda表达式的方法引用</title>
    <url>/post/ba01a835.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在使用Lambda表达式的时候，我们在方法体中所写的代码就相当于是一种解决方案：那所提供的参数，执行方法体中的代码。所以如果当时Lambda表达式的方法体中<strong>除了调用现有方法之外什么都不做，就使用其本来就已经存在的方案，</strong>这个时候我们就可以采用方法引用的书写方式。</p>
<h2 id="实例方法引用"><a href="#实例方法引用" class="headerlink" title="实例方法引用"></a>实例方法引用</h2><p>语法：<code>对象 :: 实例方法</code></p>
<p>特点：在Lambda表达式的方法体中，通过“对象”来调用指定的某个“实例方法”。</p>
<blockquote>
<p>什么是实例方法？</p>
<p>在Java中，实例方法是与对象实例相关联的方法。换句话说，它们是定义在类中的方法，必须通过类的实例（对象）来调用。实例方法可以访问和操作对象的属性，并且可以调用其他实例方法。</p>
</blockquote>
<p>要求：函数式接口中<strong>抽象方法的返回值类型和形参列表</strong>与<strong>内部通过对象调用某个实例方法的返回值类型和形参列表</strong>保持一致。</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20240523153434086.png" alt="image-20240523153434086"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;String&gt; consumer = System.out::println;</span><br><span class="line">consumer.accept(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;ande&quot;</span>, <span class="number">18</span>);</span><br><span class="line">Supplier&lt;String&gt; supplier1 = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacher.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(supplier1.get());</span><br><span class="line"><span class="comment">//简化后的代码</span></span><br><span class="line">Supplier&lt;String&gt; supplier = teacher::getName;</span><br><span class="line">System.out.println(supplier.get());</span><br></pre></td></tr></table></figure>

<h2 id="静态方法引用"><a href="#静态方法引用" class="headerlink" title="静态方法引用"></a>静态方法引用</h2><p>语法：<code>**类 :: 静态方法**</code></p>
<p>特点：在Lambda表达式的方法体中，通过“类名”来调用指定的某个“静态方法”。</p>
<blockquote>
<p>什么是静态方法？</p>
<p>静态方法是与类相关联而不是与对象实例相关联的方法，使用 <strong>static</strong> 关键字来声明</p>
<p>通过类名直接调用，无需创建类的实例</p>
<p>静态方法通常用于实现与类本身相关的功能，例如工具方法或者是与类的属性操作无关的功能</p>
</blockquote>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20240523153740679.png" alt="image-20240523153740679"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Function&lt;Double, Long&gt; function1 = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Double, Long&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">apply</span><span class="params">(Double aDouble)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.round(aDouble);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(function1.apply(<span class="number">3.14</span>));</span><br><span class="line">    <span class="comment">//改写后</span></span><br><span class="line">    Function&lt;Double, Long&gt; function = Math::round;</span><br><span class="line">    System.out.println(function.apply(<span class="number">3.14</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="特殊方法引用"><a href="#特殊方法引用" class="headerlink" title="特殊方法引用"></a>特殊方法引用</h2><p>语法：<code>**类名 :: 实例方法**</code></p>
<p>特点：在Lambda表达式的方法体中，通过方法的第一个形参来调用指定的某个“实例方法”</p>
<p>要求：把函数式接口中<strong>抽象方法的第一个形参作为方法的调用者对象</strong>，并且从第二个形参开始（或无参）可以对应到被调用实例方法的参数列表中，<strong>并且返回值类型保持一致</strong>。</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20240523153832226.png" alt="image-20240523153832226"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//特殊方法引用</span></span><br><span class="line">Comparator&lt;Double&gt; comparator1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Double&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Double o1, Double o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(comparator1.compare(<span class="number">10.0</span>, <span class="number">20.0</span>));</span><br><span class="line"><span class="comment">//改写后</span></span><br><span class="line">Comparator&lt;Double&gt; comparator = Double::compareTo;</span><br><span class="line">System.out.println(comparator.compare(<span class="number">10.0</span>, <span class="number">20.0</span>));</span><br></pre></td></tr></table></figure>

<h2 id="构造方法引用"><a href="#构造方法引用" class="headerlink" title="构造方法引用"></a>构造方法引用</h2><p>语法：<code>**类名 :: new**</code></p>
<p>特点：在Lambda表达式的方法体中，<strong>返回指定“类名”来创建出来的对象</strong></p>
<p>要求：创建对象所调用构造方法形参列表和函数式接口中的方法的<strong>形参列表保持一致</strong>，并且方法的返回值类型和创建对象的<strong>类型保持一致</strong>。</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20240523153911942.png" alt="image-20240523153911942"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier&lt;Teacher&gt; supplier1 = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Teacher&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Teacher <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(supplier1.get());</span><br><span class="line"></span><br><span class="line">Supplier&lt;Teacher&gt; supplier = Teacher::<span class="keyword">new</span>;</span><br><span class="line">System.out.println(supplier.get());</span><br></pre></td></tr></table></figure>

<h2 id="数组引用"><a href="#数组引用" class="headerlink" title="数组引用"></a>数组引用</h2><p>语法：<code>**数组类型 :: new**</code></p>
<p>特点：在Lambda表达式的方法体中，创建并返回指定类型的“数组”</p>
<p>要求：重写的方法有且只有一个整数型的参数，并且该参数就是用于设置数组的空间长度，并且重写方法的返回值类型和创建数组的类型保持一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;Integer, <span class="type">int</span>[]&gt; function12 = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, <span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] apply(Integer integer) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[integer];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(Arrays.toString(function12.apply(<span class="number">10</span>)));</span><br><span class="line"></span><br><span class="line">Function&lt;Integer, <span class="type">int</span>[]&gt; function2 = <span class="type">int</span>[]::<span class="keyword">new</span>;</span><br><span class="line">System.out.println(Arrays.toString(function2.apply(<span class="number">20</span>)))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC模式与三层架构模式</title>
    <url>/post/ebbb47b7.html</url>
    <content><![CDATA[<h1 id="MVC模式与三层架构模式"><a href="#MVC模式与三层架构模式" class="headerlink" title="MVC模式与三层架构模式"></a>MVC模式与三层架构模式</h1><h3 id="什么是MVC模式？"><a href="#什么是MVC模式？" class="headerlink" title="什么是MVC模式？"></a>什么是MVC模式？</h3><p>MVC模式，即<strong>Model模型</strong>、<strong>View视图</strong>、<strong>Controller</strong>*<strong>控制器</strong></p>
<ul>
<li><strong>View：</strong>视图，用于<strong>为用户提供使用界面</strong>以及<strong>与用户直接进行交互</strong></li>
<li><strong>Model:</strong> 模型，用于承载数据，并<strong>对用户提交的请求进行处理。</strong>一共分为两类：<ul>
<li><strong>数据承载Bean：</strong>指的也就是实体类（如：User类、Student类），专门用于处理承载业务数据。</li>
<li><strong>业务处理Bean：</strong>则指的是service或dao对象，专门用于处理用户提交的请求（登录、注册）。</li>
</ul>
</li>
<li><strong>Controller****：</strong>控制器，用于接收用户请求，并将请求跳转（转发、重定向）到对应的Model进行处理；Model处理完毕后，交接过返回给控制器，结果经过渲染后，再有控制器将结果返回给视图层。</li>
</ul>
<h3 id="MVC模式的工作流程"><a href="#MVC模式的工作流程" class="headerlink" title="MVC模式的工作流程"></a>MVC模式的工作流程</h3><ul>
<li><p>用户通过View页面向服务端提出请求，可以是表单请求、超链接请求、AJAX请求等</p>
</li>
<li><p>服务端Controller控制器接收到请求后进行解析，找到对应的Model对用户请求进行处理</p>
</li>
<li><p>Model处理后，将处理结果再交给Controller</p>
</li>
<li><p>Controller在接到处理结果后，根据处理结果找到要作为客户端发回的响应View页面。页面经过渲染（数据填充）后，再发送给客户端。</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/0621music/asynccode" alt="img"></p>
</li>
</ul>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/0621music/asynccode" alt="img"></p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/0621music/20230722213321.png"></p>
<h3 id="什么是三层架构模式？"><a href="#什么是三层架构模式？" class="headerlink" title="什么是三层架构模式？"></a>什么是三层架构模式？</h3><p>三层架构指的是：<strong>视图层view（表现层）、服务层service（业务逻辑层）、持久层dao（数据访问层）</strong></p>
<p><strong>视图层view（表现层）：</strong>用于<strong>显示数据</strong>和<strong>接收</strong>用户输入的<strong>数据</strong>，为用户提供一种<strong>交互式</strong>操作的界面展示。其<strong>主要作用概括为：界面展示、接收请求、分发请求。</strong></p>
<p><strong>服务层service（业务逻辑层）：实现业务的主要逻辑，是系统架构中体现核心价值的部分。</strong>将一个业务中所有的操作封装成一个方法，同时保证方法中所有的数据库更新操作，即保证<strong>同时成功或同时失败</strong>。避免部分成功部分失败引起的数据混乱操作。将表现层与数据访问层联系起来，比如在嗲用访问数据的代码之前，先对数据进行处理和判断。</p>
<p><strong>持久层dao：其主要的作用是负责数据库的访问，</strong>是对数据库的操作，而不是对数据的操作，比如：实现对数据表的增删查改操作，持久层的目的就是，完成对象数据和关系数据的转换。</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/0621music/image-20230722213354116.png" alt="image-20230722213354116"></p>
<blockquote>
<p>一般来说：Controller与service、dao层之间为串行关系，即从Controller到service再到dao层</p>
<p>Controller层通常包括参数校验、路由、将渲染的数据返回视图层三个部分</p>
<p>service层主要用于控制事务，也就是将实现一个事务所需要的逻辑写在这里</p>
<p>dao层也就是一堆增删查改，增删查改的接口，SQL控制等</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM项目启动失败</title>
    <url>/post/f3c48358.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>通过配置类的方式编写一个基于SSM框架的一个小项目时，在配置类反复检查没有问题的情况下，启动Tomcat服务器时报错，启动失败。</p>
<p>报错信息：</p>
<p>22-Nov-2023 12:31:53.210 严重 [RMI TCP Connection(2)-127.0.0.1] org.springframework.web.context.ContextLoader.initWebApplicationContext Context initialization failed</p>
<h1 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h1><p>更换了所引入依赖的版本，报错问题解决</p>
<p>在这里记录一下正确可用的一组依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zcy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nomoredepression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  Spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    SpringMVC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    MySQL驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--      Lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    德鲁伊数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    junit单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        Servlet--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        taglibs--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Bug集</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>VScodeC/C++环境（控制台乱码问题一步到位）</title>
    <url>/post/2af3af78.html</url>
    <content><![CDATA[<h1 id="VScode配置C-x2F-C-环境（控制台中文乱码问题一步到位）"><a href="#VScode配置C-x2F-C-环境（控制台中文乱码问题一步到位）" class="headerlink" title="VScode配置C&#x2F;C++环境（控制台中文乱码问题一步到位）"></a>VScode配置C&#x2F;C++环境（控制台中文乱码问题一步到位）</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>C&#x2F;C++的编译器用过很多，VS2010(第一个C&#x2F;C++编译器，体验只能说一般，没有代码提示，记得是做第一次课设的时候，这玩意儿死活问题改不了，换成了VS2019，当时课设的问题就解决了，后面一段时间都在用这玩意)，VS2019（总体还是不错，虽然对于sacnf这类会有安全检查，但好歹可以在新建项目的时候就去掉，but没过多久人生第一台笔记本压根不够用了，换了一台新笔记本，好家伙赶上更新，我手痒直接装了VS2022，结果我的感觉是不如VS2019，but人又比较懒，不想卸载重装）VS2022（安全检查不能在一开始去掉了，只能建了项目后再去属性里面改，不过其实这也没啥大问题。让我想换掉它的最直接原因就是，这玩意太吃内存了，感觉比idea还吃内存，运行起来体验感非常不佳。嗯….既然都提到了idea,它的兄弟Clion我也用了）Clion(UI、代码高量、提示这些毫无疑问是非常不错的，但是其实我也不用C&#x2F;C++写工程，用点杀鸡用牛刀的感觉，而且这玩意CMake和中文乱码的配置问题也是在刚开始够你喝一壶了)而像devC++(实话实说除了比赛的时候用这玩意，其他时候，也是真心不想用，就像VS2010一样，体验很一般)，所以最后的最后我选择了VScode，今天分享的也就是VScode的C&#x2F;C++配置 。</p>
<h1 id="配置准备"><a href="#配置准备" class="headerlink" title="配置准备"></a>配置准备</h1><p>在进行配置前需要安装VScode和mingw作为基础的运行环境，</p>
<p>安装过程：（真的很简单，不做详细描述，实在不会再百度下其他文章吧）</p>
<p>官网下载安装包-&gt;选择安装路径-&gt;无脑一直下一步就行（对于mingw不要忘记配置环境变量）</p>
<h1 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h1><p>既然是想让大家少踩坑，这个配置教程肯定是越简单越好，所以接下来说的方法我觉得应该是最无脑的方法了，所以我也尽量不写什么废话。</p>
<p>在VScode的拓展市场安装拓展，就是下面这个</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230426220311265.png" alt="image-20230426220311265"></p>
<p>在电脑上选择一个文件夹用来存放C&#x2F;C++的项目代码，并建立.vscode文件夹，看清楚这里前面有个点的哈！！！！！！（如下图所示）</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230426220505473.png" alt="image-20230426220505473"></p>
<p>在这个.vscode文件夹下 需要创建三个文件分别是c_cpp_properties.json，launch.json，tasks.json，图片上多余的那个请忽略。</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230426221111407.png" alt="image-20230426221111407"></p>
<p>三个文件的代码分别如下：</p>
<p>c_cpp_properties.json：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;windows-clang-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;_UNICODE&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;windowsSdkVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.17763.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot; D:/Program/mingw64/bin/g++.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c11&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;windows-clang-x64&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>launch.json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++.exe build and debug active file&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Program\\mingw64\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;task g++&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++ Runner: Debug Session&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d:/vscodeprojects/CC++Projects&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d:/vscodeprojects/CC++Projects/build/Debug/outDebug&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>tasks.json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558 </span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;task g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Program\\mingw64\\bin\\g++.exe&quot;</span><span class="punctuation">,</span>	<span class="comment">/*修改成自己bin目录下的g++.exe，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-I&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;D:\\vscodeprojects\\CC++Projects&quot;</span><span class="punctuation">,</span>      <span class="comment">/*修改成自己放c/c++项目的文件夹，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span></span><br><span class="line">            <span class="string">&quot;-std=c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-fexec-charset=gbk&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Program\\mingw64\\bin&quot;</span>	<span class="comment">/*修改成自己bin目录，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">        </span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>复制之后<strong>所需要做的也只有将三个文件中所出现的路径根据注释换成你自己电脑中的路径</strong>就得了，关于中文乱码的问题我也通过三个文件的配置给解决了，没有对VScode的本身或者电脑里的设置进行更改了。</p>
<h1 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h1><p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230426221840213.png" alt="image-20230426221840213"></p>
<p>可以看到这个方法我也没有去修改，VScode下面的编码方式，因为我自己电脑上的编译器貌似用的都是UTF-8，所也就不想去改了，另外前文也提到了VS用的比较久，所以更加喜欢用Windows的cmd控制台作为输出，不喜欢的话这个也是可以改的，true改false即可。</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20230426222249735.png" alt="image-20230426222249735"></p>
<p>欧克，到此问题就讲完了，希望对大家能够有所帮助</p>
<p>另外，前言部分关于各种编译器的使用体验仅代表个人观点，不喜勿喷哈！</p>
]]></content>
      <categories>
        <category>百宝箱</category>
      </categories>
      <tags>
        <tag>软件安装与配置</tag>
      </tags>
  </entry>
  <entry>
    <title>useRoute与useRouter的区别</title>
    <url>/post/eecfc82e.html</url>
    <content><![CDATA[<h2 id="官方文档："><a href="#官方文档：" class="headerlink" title="官方文档："></a>官方文档：</h2><p><a href="https://router.vuejs.org/zh/api/#Functions-useRoute">https://router.vuejs.org/zh/api/#Functions-useRoute</a></p>
<p>useRoute():返回当前的路由地址。相当于在模板中使用 $route。</p>
<p>useRouter():返回路由器实例。相当于在模板中使用 $router。</p>
<h2 id="useRoute-函数"><a href="#useRoute-函数" class="headerlink" title="useRoute( )函数"></a>useRoute( )函数</h2><p>useRoute( )函数用于在组件中获取当前路由的信息，返回一个包含路由信息的对象。每一个路由都有一个route对象，这是一个局部的对象，可以从中获得name、path、params、query（如下所示）等当前路由信息的静态数据。</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20240523152752247.png" alt="image-20240523152752247"></p>
<p>使用案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">		&lt;template v-if=&quot;route.path.startsWith(&#x27;/user&#x27;)&quot;&gt;</span><br><span class="line">			&lt;NoHeaderLayouts /&gt;</span><br><span class="line">		&lt;/template&gt;</span><br><span class="line">		&lt;template v-else&gt;</span><br><span class="line">			&lt;basic-layouts /&gt;</span><br><span class="line">		&lt;/template&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">	import BasicLayouts from &#x27;@/layouts/BasicLayouts.vue&#x27;</span><br><span class="line">	import NoHeaderLayouts from &#x27;@/layouts/NoHeaderLayouts.vue&#x27;</span><br><span class="line">	import &#123;useRoute&#125; from &quot;vue-router&quot;;</span><br><span class="line"></span><br><span class="line">	const route = useRoute()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">	#app &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="useRouter-函数"><a href="#useRouter-函数" class="headerlink" title="useRouter( )函数"></a>useRouter( )函数</h2><p>router是VueRouter的一个对象，用于获取路由实例，可以通过他来进行一些动态的路由操作，比如实现路由跳转。其通过Vue.use(VueRouter)和VueRouter构造函数得到一个router的实力对象，这个对象是一个全局的对象，包含了许多关键的对象和属性。</p>
<p>代码举例：</p>
<p>实现路由的跳转，原理：实际上是对history对象的操作，是向history栈中添加一个路由，添加一条history记录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const router = useRouter()</span><br><span class="line">router.push(&#123;</span><br><span class="line">	path: &#x27;home&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>useRoute( )主要用于获取当前页面的路由信息</li>
<li>useRouter( )主要用于获取路由实例，用于对路由进行动态操作的场景</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>来个开篇词吧！</title>
    <url>/post/b388a4c.html</url>
    <content><![CDATA[<h1 id="有梦则刚，素履以往"><a href="#有梦则刚，素履以往" class="headerlink" title="有梦则刚，素履以往"></a>有梦则刚，素履以往</h1><p>于高山之巅，方见大河奔涌；于群峰之上，更觉长风浩荡。芳华待灼,砥砺深耕,奋楫笃行,履践致远。来即如露，去时如电，留不住的始终是那刹那芳华；凡益之道，与时偕行；坚定心中理想，与对未来的不懈追求，有梦则刚，素履以往；满怀着对未来的期望，迎接未知的挑战，看平凡闪耀出奇迹，人生最璀璨的瞬间莫过于那撕破深夜的火花，人生最幸福的事情莫过于不断的挑战自己，完善自己。</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/65f2fcdb11784723b71c528e92d5542c.jpg" alt="65f2fcdb11784723b71c528e92d5542c"></p>
<p>长路漫漫，晴雨交加，但若是心怀热爱，即使岁月荒芜，亦能奔山赴海，静待一树花开，热爱是一个人内心最深沉持久的力量，它不是心血来潮的三分热度，也不会因为时代变迁而稍纵即逝。相反，在历经时光考验与洗礼后，依然能够让人从中不断汲取营养；时间的长河奔腾不息，有静水流深，也有惊涛骇浪，直面困难不放弃，跌倒后勇敢站起来，抖擞精神再出发，是我们身上所独有的少年之气，是历经千帆举重若轻的沉淀，也是乐观淡然笑对生活的豁达。</p>
<p>我们需要不断的去战胜自己，真正的优秀不是别人逼出来的，而是自己和自己死磕，不断地进行自我完善。比大地辽阔的是海洋，比海洋更浩瀚的是九天之上的星辰大海，凡益之道，与时偕行；逐梦星海，未来等你来！向未来！海到无边天作岸，山登绝顶我为峰。向未来! 两道风景相送，彼岸繁花相迎。</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/12.jpg" alt="12"></p>
<p>乘风好去，长空万里；眼底山河，胸中事业；树蕙餐英，上下求索；今日长缨在手，且把利剑破长空。穿花觅雨，直入云霄；风雨同舟，万变不从；凡心所向，素履以往；胸中有丘壑，立马振山河。明日之我，愿付苍流； 生如逆旅，无弗远届；聚沙成塔，滚石上山；一片冰心在玉壶，归来依旧是少年。矢志不渝，一苇以航；真抓实干，以启山林；你若前来，粉蝶盛开；有志何妨梦摘星，敢挽桑弓射玉衡。</p>
<p>诸君：“三月桃花，四月欢唱；我自倾怀，且君随意；有志摘星，未来等你！<strong>我们静待花开，愿君如梦所期，不负春光不负己。”</strong></p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>开篇词</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3实现省市联动表项</title>
    <url>/post/6cf485f1.html</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>所用技术栈：vue3+ElementPlus</p>
<p>需求：要求在对用户信息中的籍贯信息录入时，有一个省市联动的表单可供选择</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>参考文档：<a href="https://www.npmjs.com/package/element-china-area-data">https://www.npmjs.com/package/element-china-area-data</a></p>
<p>下载对应插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install element-china-area-data -S</span><br></pre></td></tr></table></figure>

<p>导入库：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  provinceAndCityData,</span><br><span class="line">  pcTextArr,</span><br><span class="line">  regionData,</span><br><span class="line">  pcaTextArr,</span><br><span class="line">  codeToText,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;element-china-area-data&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>vue3页面代码的实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-cascader</span><br><span class="line">  size=&quot;large&quot;</span><br><span class="line">  :options=&quot;pcTextArr&quot;</span><br><span class="line">  v-model=&quot;sd&quot;</span><br><span class="line">  @change=&quot;handleChange&quot;</span><br><span class="line">  &gt;</span><br><span class="line">&lt;/el-cascader&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sd = <span class="title function_">ref</span>([])</span><br><span class="line"><span class="comment">//这里的authorMsg为存储最后选择结果的字段</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params"></span>)&#123;</span><br><span class="line">  authorMsg.<span class="property">city</span> = sd.<span class="property">value</span>[<span class="number">0</span>]+sd.<span class="property">value</span>[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20240511212756479.png" alt="image-20240511212756479"></p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20240511212816165.png" alt="image-20240511212816165"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么不推荐使用Join</title>
    <url>/post/da8d13c.html</url>
    <content><![CDATA[<p>在阿里的Java开发规范手册中，<strong>写明“超过三个表禁止使用Join”</strong></p>
<ol>
<li>难以进行维护，影响代码阅读。复杂的Join查询难以阅读和维护，尤其是在多表连接中需要处理多个连接条件和筛选条件。容易出现逻辑错误，难以排查问题。</li>
<li>索引的设计将变得复杂。为了提高多表Join查询的性能，需要为每个表创建合适的索引，这样也就增加了索引的设计与维护的复杂性。</li>
<li>最主要要的原因在于其Join本身的效率就比较低。MySQL采用循环嵌套的方式来实现关联查询（用第一张表做外循环，第二张表做内循环，外循环的每一套记录跟内循环中的记录作比较，符合条件的则输出）。如果有两张表的join，复杂度最高为O(n^2)。三张表则是O(n^3)。所以当join的表越多，join的效率会呈指数级下降。</li>
</ol>
]]></content>
      <categories>
        <category>八股文</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>四个基本的函数式接口</title>
    <url>/post/f2d12cec.html</url>
    <content><![CDATA[<h2 id="函数式接口介绍："><a href="#函数式接口介绍：" class="headerlink" title="函数式接口介绍："></a>函数式接口介绍：</h2><p>函数式接口是Java 接口的一种，但在接口的基础上，还需要满足：</p>
<ol>
<li>一个函数式接口只有一个抽象方法(SAM，single abstract method)；</li>
<li>Object 类中的 public abstract method 不会被视为单一的抽象方法；</li>
<li>函数式接口可以有默认方法和静态方法；</li>
<li>函数式接口可以用@FunctionalInterface 注解进行修饰。</li>
</ol>
<p>函数式接口的作用：函数式接口带给我们最大的好处就是：可以使用极简的Lambda表达式实例化接口。</p>
<p><strong>四个基本的函数式接口：</strong></p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20240515215716322.png" alt="image-20240515215716322"></p>
<p>以上的函数式接口都在java.util.function包中，通常函数接口出现的地方都可以使用Lambda表达式</p>
<p><strong>@FunctionalInterface ：</strong></p>
<p>一个接口只要满足只有一个抽象方法的条件，即可以当成函数式接口使用，有无@FunctionalInterface都无所谓,但是jdk定义了这个注解肯定是有原因的。</p>
<p>@FunctionalInterface更相当于是一种限制，凡是使用了这个注解的接口，开发者可放心大胆的使用lambda来实例化，使用了这个注解的接口只允许存在一个抽象方法。</p>
<h2 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h2><ul>
<li><code>compose(Function before)</code>：同理，将两个 Function 组合，将先执行 compose 函数，再执行当前函数，并将 compose 函数的结果作为参数传递给当前函数。</li>
<li><code>identity()</code>：返回一个执行恒等转换的函数，即返回输入参数本身。</li>
</ul>
<h3 id="apply方法"><a href="#apply方法" class="headerlink" title="apply方法"></a>apply方法</h3><p><code>R apply（T，t）</code> 根据类型T的参数获取类型为R的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Function 接口的泛型，第一个参数是入参类型，第二个参数是出参类型</span></span><br><span class="line"><span class="comment">// Function 接口只有一个抽象方法，就是 apply()</span></span><br><span class="line"><span class="comment">//利用 Lambda 表达式实现这个抽象方法并创建 Function 对象</span></span><br><span class="line">Function&lt;Integer, String&gt; function = num -&gt; <span class="string">&quot;GTA&quot;</span> + num;</span><br><span class="line"><span class="comment">// 将5这个参数传递给function，得到返回结果</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> function.apply(<span class="number">5</span>);</span><br><span class="line">System.out.println(result); <span class="comment">// 打印：GTA5</span></span><br></pre></td></tr></table></figure>

<h3 id="andThen方法"><a href="#andThen方法" class="headerlink" title="andThen方法"></a><strong>andThen方法</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求：</span></span><br><span class="line"><span class="comment"> *      把String类型的&quot;123&quot;,转换成Integer类型，把转换后的结果+10</span></span><br><span class="line"><span class="comment"> *      把增加之后的Integer类型的数据转换成String类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Function&lt;String, Integer&gt; fun1 = str -&gt; Integer.parseInt(str) + <span class="number">10</span>;</span><br><span class="line">    Function&lt;Integer, String&gt; fun2 = num -&gt; num +<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> fun1.andThen(fun2).apply(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    System.out.println(ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/20240515220031.png" alt="img"></p>
<p>运行结果：</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20240515220120761.png" alt="image-20240515220120761"></p>
<h3 id="compose方法"><a href="#compose方法" class="headerlink" title="compose方法"></a><strong>compose方法</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Function&lt;String, Integer&gt; fun1 = str -&gt; Integer.parseInt(str) + <span class="number">10</span>;</span><br><span class="line">        Function&lt;Integer, String&gt; fun2 = num -&gt; num +<span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">ans2</span> <span class="operator">=</span> fun1.compose(fun2).apply(<span class="number">123</span>);</span><br><span class="line">        System.out.println(ans2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20240515220154939.png" alt="image-20240515220154939"></p>
<p>运行结果：</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/image-20240515220216435.png" alt="image-20240515220216435"></p>
<h3 id="identify方法"><a href="#identify方法" class="headerlink" title="identify方法"></a>identify方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;String, String&gt; identity = Function.identity();</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> identity.apply(<span class="string">&quot;hello&quot;</span>); <span class="comment">// 打印：hello</span></span><br></pre></td></tr></table></figure>

<h2 id="Consumer接口"><a href="#Consumer接口" class="headerlink" title="Consumer接口"></a>Consumer接口</h2><p>consumer意为消费者，顾名思义就是入参消费了，并不会返回结果</p>
<p>Consumer 接口包含两个方法：</p>
<ul>
<li>accept(T t)：该方法接受一个参数并执行一些操作。</li>
<li>andThen(Consumer after)：同理，将两个 Consumer 组合，先后进行消费。</li>
</ul>
<h3 id="accept-方法"><a href="#accept-方法" class="headerlink" title="accept 方法"></a>accept 方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Consumer 接口，泛型参数是入参类型，</span></span><br><span class="line"><span class="comment">//接受一个参数，并不返回结果，相当于消费了这个参数</span></span><br><span class="line">Consumer&lt;String&gt; consumer = s -&gt; System.out.println(s);</span><br><span class="line">consumer.accept(<span class="string">&quot;我输入什么就打印什么&quot;</span>); <span class="comment">// 打印：我输入什么就打印什么</span></span><br></pre></td></tr></table></figure>

<p><strong>andThen( )方法通上</strong></p>
<h2 id="Supplier-接口"><a href="#Supplier-接口" class="headerlink" title="Supplier 接口"></a>Supplier 接口</h2><p>Supplier即生产者，没有索取，只有付出，也就是不需要参数，但会提供一个<code>get( )</code>方法返回一个玩意儿给你。</p>
<p>Supplier接口通常用于生成一个值</p>
<h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Supplier 接口，泛型参数是出参类型，不接受参数，</span></span><br><span class="line"><span class="comment">//但是会提供结果，相当于生产了某个东西</span></span><br><span class="line">Supplier&lt;String&gt; supplier = () -&gt; <span class="string">&quot;提供一个我随便打的字符串给调用方&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> supplier.get();</span><br><span class="line">System.out.println(text); <span class="comment">// 打印：提供一个我随便打的字符串给调用方</span></span><br></pre></td></tr></table></figure>

<h2 id="Predicate-接口"><a href="#Predicate-接口" class="headerlink" title="Predicate 接口"></a>Predicate 接口</h2><p>Predicate 这个单词的意思就有「预言，预测，谓语，谓词」的意思，就是用来预测判断的。</p>
<p>Predicate 接口包含四个方法：<br>●<code>test(T t)</code>：该方法接受一个参数并<strong>返回一个布尔值</strong>。<br>●<code>and(Predicate other)</code>：与另一个 Predicate 进行组合，实现逻辑与操作。<br>●<code>negate()</code>：与另一个 Predicate 进行组合，实现逻辑非操作。<br>●<code>or(Predicate other)</code>：与另一个 Predicate 进行组合，实现逻辑或操作。</p>
<h3 id="test方法"><a href="#test方法" class="headerlink" title="test方法"></a>test方法</h3><p>Predicate 接口通常用于测试一个条件是否成立</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PredictTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Predicate 接口，泛型参数是入参类型，返回布尔值</span></span><br><span class="line">        Predicate&lt;String&gt; p1 = s -&gt; s.contains(<span class="string">&quot;zcy&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">test</span> <span class="operator">=</span> p1.test(<span class="string">&quot;zcyyyds&quot;</span>);</span><br><span class="line">        System.out.println(test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：true</p>
<h3 id="and方法"><a href="#and方法" class="headerlink" title="and方法"></a>and方法</h3><p>逻辑与（全真则真）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PredictTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Predicate 接口，泛型参数是入参类型，返回布尔值</span></span><br><span class="line">        Predicate&lt;String&gt; p1 = s -&gt; s.contains(<span class="string">&quot;zcy&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">test</span> <span class="operator">=</span> p1.test(<span class="string">&quot;zcyyyds&quot;</span>);</span><br><span class="line">        System.out.println(test);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        Predicate&lt;String&gt; p2 = s -&gt; s.endsWith(<span class="string">&quot;yyds&quot;</span>);</span><br><span class="line">        Predicate&lt;String&gt; p3 = p1.and(p2);</span><br><span class="line">        System.out.println(p3.test(<span class="string">&quot;zcyyyds&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(p3.test(<span class="string">&quot;zcyyyds?&quot;</span>));<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="negate方法"><a href="#negate方法" class="headerlink" title="negate方法"></a>negate方法</h3><p>逻辑非（原本值反值）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PredictTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Predicate 接口，泛型参数是入参类型，返回布尔值</span></span><br><span class="line">        Predicate&lt;String&gt; p1 = s -&gt; s.contains(<span class="string">&quot;zcy&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">test</span> <span class="operator">=</span> p1.test(<span class="string">&quot;zcyyyds&quot;</span>);</span><br><span class="line">        System.out.println(test);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        Predicate&lt;String&gt; p2 = s -&gt; s.endsWith(<span class="string">&quot;yyds&quot;</span>);</span><br><span class="line">        Predicate&lt;String&gt; p3 = p1.and(p2);</span><br><span class="line">        System.out.println(p3.test(<span class="string">&quot;zcyyyds&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(p3.test(<span class="string">&quot;zcyyyds?&quot;</span>));/<span class="literal">false</span></span><br><span class="line">        System.out.println(p3.negate().test(<span class="string">&quot;zcyyyds?&quot;</span>));<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="or-方法"><a href="#or-方法" class="headerlink" title="or 方法"></a>or 方法</h3><p>逻辑或（有1则1）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PredictTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Predicate 接口，泛型参数是入参类型，返回布尔值</span></span><br><span class="line">        Predicate&lt;String&gt; p1 = s -&gt; s.contains(<span class="string">&quot;zcy&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">test</span> <span class="operator">=</span> p1.test(<span class="string">&quot;zcyyyds&quot;</span>);</span><br><span class="line">        System.out.println(test);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        Predicate&lt;String&gt; p2 = s -&gt; s.endsWith(<span class="string">&quot;yyds&quot;</span>);</span><br><span class="line">        Predicate&lt;String&gt; p3 = p1.and(p2);</span><br><span class="line">        System.out.println(p3.test(<span class="string">&quot;zcyyyds&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(p3.test(<span class="string">&quot;zcyyyds?&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(p3.negate().test(<span class="string">&quot;zcyyyds?&quot;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        Predicate&lt;String&gt; p4 = p1.or(p2);</span><br><span class="line">        System.out.println(p4.test(<span class="string">&quot;zcyyyds?&quot;</span>));<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>对于数据库范式（1NF，2NF，3NF，BCNF）的理解</title>
    <url>/post/e5b65d47.html</url>
    <content><![CDATA[<h1 id="对于数据库范式（1NF，2NF，3NF，BCNF）的理解"><a href="#对于数据库范式（1NF，2NF，3NF，BCNF）的理解" class="headerlink" title="对于数据库范式（1NF，2NF，3NF，BCNF）的理解"></a>对于数据库范式（1NF，2NF，3NF，BCNF）的理解</h1><p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/asynccode" alt="img"></p>
<h2 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h2><p>定义：属于第一范式关系的所有属性不能够再被拆分，即为一张简单的基本表</p>
<p>一个列名智能对应到一列，并且每一列都不可分</p>
<p>复杂表还能继续拆分，不符合第一范式：</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/asynccode" alt="img"></p>
<p>符合基本范式的基本表：</p>
<p><img src="https://cycy-1313208795.cos.ap-guangzhou.myqcloud.com/img/asynccode" alt="img"></p>
<h2 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h2><p>定义：前提是满足第一范式且每个非主属性完全函数依赖于任何一个候选码则关系R为第二范式</p>
<p><strong>什么候选码？</strong></p>
<p>若关系中的某一属性组的值能唯一地标识一个元组，而其子集不能，则称该属性组为候选码。若一个关系中有多个候选码，则选定其中一个为主码。</p>
<p><strong>什么是主属性？</strong></p>
<p>所有候选码的属性称为主属性。不包含在任何候选码中的属性称为非主属性或非码属性。</p>
<p><strong>什么是完全函数依赖？</strong></p>
<p>设R(U)是属性集U上的关系模式，X、Y是U的子集。如果Y函数依赖于X，且对于X的任何一个真子集X’，都有Y不函数依赖于X’，则称Y对X完全函数依赖。记作：如果Y函数依赖于X，但Y不完全函数依赖于X，则称Y对X部分函数依赖。</p>
<p>简单说就是：指不能存在仅依赖于候选键（主属性）的一部分的属性，所以只有一个主属性的表如果符合第一范式就一定符合第二范式。</p>
<p><strong>如何判断是否符合第二<strong><strong>范式</strong></strong>？</strong></p>
<ol>
<li>找出数据表中所有的候选键；</li>
<li>找出所有主属性和非主属性</li>
<li>判断所有的非主属性对候选键的部分函数依赖</li>
</ol>
<h2 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h2><p>定义：非主属性既不传递依赖于码，也不部分依赖于码，<strong>相互独立不存在其他函数关系</strong></p>
<p>也就是<strong>在第二<strong><strong>范式</strong></strong>的基础上消除<strong><strong>传递函数</strong></strong>依赖，每一列（所有的非主属性）都要与候选码直接相关，而非间接相关，既不部分依赖于候选码，也不传递依赖于候选码。</strong></p>
<h2 id="BCNF范式"><a href="#BCNF范式" class="headerlink" title="BCNF范式"></a>BCNF范式</h2><p>也就是修正后的第三范式</p>
<p>定义：设关系模式R满足第一范式，如果对于R的每个函数依赖，X-&gt;Y,若Y不属于X，则X必含有候选码，那么R属于bc范式</p>
<p>换句话说，在关系模式R中，如果每一个决定属性集都包含候选码，则R属于bc范式，没有任何属性（主属性和非主属性）对候选码有部分函数依赖和传递函数依赖</p>
<h2 id="冗余"><a href="#冗余" class="headerlink" title="冗余"></a>冗余</h2><p>将一个2NF关系采用投影分解的方法，分解成多个3NF的关系，可以在一定程度上解决原2NF关系中存在的插入异常、删除异常、数据冗余度大、修改复杂等问题。</p>
<p>但将一个2NF关系分解成多个3NF的关系后，在有些情况下，也还是不能完全消除关系模式中的各种异常情况和数据冗余。</p>
<p>哪里不符合BC范式，哪里就会出现冗余</p>
<p>范式级别越高、信息越分散，查询也越难</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>通往产品世界的启迪之旅</title>
    <url>/post/9981b8c2.html</url>
    <content><![CDATA[<p>通向产品世界的启迪之旅</p>
<h2 id="读《人人都是产品经理》有感"><a href="#读《人人都是产品经理》有感" class="headerlink" title="读《人人都是产品经理》有感"></a>读《人人都是产品经理》有感</h2><p>思维导图在线链接：<a href="https://lbwbjpvpye.feishu.cn/wiki/HACyw7kKqihXoAkb0d5c4WmonlT">人人都是产品经理思维导图</a> </p>
<h2 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h2><p>从入学到现在，今年是第三个年头，在接触这本《人人都是产品经理》与需求工程这门课程前，我对于软件工程这个专业的认知，停留在片面的代码Coding上，比如掌握了哪几门编程语言、能够熟练地使用多少框架、能否熟练地使用算法解题等等，认为掌握良好的开发技术和编程思想便就是这个专业的王道。<strong>现在看来，过去的想法存在着很大的偏差，代码开发仅仅只是一个完整产品项目落地之中很小的一部分。</strong>于是乎读《人人》这本书便就像是通往产品世界一趟启迪之旅，开启新世界的大门。</p>
<h2 id="阅读感受与思考"><a href="#阅读感受与思考" class="headerlink" title="阅读感受与思考"></a>阅读感受与思考</h2><p>刚开始读，就被书本的有趣的风格所吸引，作者用讲故事的方式，通过生活中的事例来进行讲解，而不是一味的知识输送；留给了我们自己思考的空间，文笔轻松，让人读起来很舒服。</p>
<p>我们的生活早已不是以前简简单单的温饱问题，我们开始追求生活质量、产品已经融入方方面面，成为我们日常不可或缺的一部分。或许在未来的生活中，我们或许不会选择去成为一名产品经理，但是产品经理不仅仅是一种职业，它更是一类人，产品经理的思维方式更像是一种超越职业界限的人生态度。</p>
<p>书中作者通过将当前互联网行业与传统行业产品的特点进行多方面的对比，分享了对产品经理概念的独特见解；产品经理不仅是领域内专业的管理者，更是能够跨足不同领域，扮演沟通者、协调者和决策者角色的关键人物。在这一多维度的角色中，产品经理需要展现出卓越的管理技能，即在资源不足的情况下把事情做成，能够合理分配当前资源，管理当前现有资源，合理利用的灵活应对能力。每天都是现场直播，没有所谓彩排，没有所谓的完美人生，对待生活中的事情同样也要求我们能够对我们自己当前的情况和目标进行综合评判，做出合理的选择或解决方式。</p>
<p>关于需求：需求从本质上来看，需求就是问题，而问题的本质便就是理想与现实的差距，在实际的生活中应该透过问题看本质，客户真正需要的是什么？只有能够了解其真正的需要，我们才能拿出更适合的解决方案，将理想变为现实。产品经理所存在的价值是将用户需求转化为产品需求，确定需求的基本属性，对于众多的需求，我们更需要去考虑的是需求的商业价值、需求的重要性、紧迫性、实现的难度与代价，映射到生活中，面对生活中大大小小的事，我们也可以按照同样的方法，提高生活的效率，减少焦虑，更好的笑对生活。除此之外，作者对于需求采集与分析的描述：定性地说、定量地说、定性地做、定量地做，我的理解是对于一件事情的描述光靠所谓的形容词，光靠自己的主观臆断是远远不够的，我们需要用事实说话，需要用数据说话，这样的定性、定量的描述才会让我们所得出的结论更加准确，更加真实；方法同样可以应用于生活，帮助我们更好的去看待或评估一件事。</p>
<p>书中也还强调需求必须以客户为中心，深入贯彻“从用户中来到用户中去”的核心思想，牢记“用户是需求之源”， 与用户接触就是需求采集的过程，但也要记住听用户的但不要照着做，不要被用户所自以为的解决方案而牵着鼻子走。同时“用户至上”并不仅仅是一种口号，更是一种实践精神。在产品经理的工作中，始终保持对用户需求的敏感性，是确保产品长期成功的关键。</p>
<p>书中还讲到少做就是多做。在实际的工作与生活之中，我们的资源，包括时间都是有限的，我们常常抱怨生活节奏太快，还没来的及好好享受生活，一年的光阴早已匆匆溜走。其实仔细想想，是不是我们想要的太多了，我们追求生活质量，就不断疯狂的工作；追求自身的发展便不断地学习。但资源终归是有限的，我们需要学会权衡，不要试图满足所有用户，也不要试图一次性解决用户所有的问题。明确做这件事有什么价值，我能从中收获多少？唯有深思熟虑，不断地权衡考量，加功能、砍功能，最后留下的才是最为重要的，只有经历过砍功能之后的少做才是真正的多做。反思自己的生活，自己或许看似很努力，每天都学xx小时，但在这其中获取更多是在“瞎忙”，静下心来，将自己今天要做的事都列出来，衡量出到底哪些事情是值得做的，这很重要，而不是貌似自己一直在做忙，却没有什么实际意义或者效果，反而累了自己。</p>
<p>一旦项目需求确定，我们便踏上项目实施的旅程，目睹一个产品由无到有的完整过程。不论是产品还是项目，都离不开紧密的团队协作。产品经理不仅仅是项目的组织者，更是推动产品成功的关键因素。一个出色的产品背后必然有一个协同合作的大团队，而这个团队内部又需要分工协作，各司其职。团结拼搏成为出色产品诞生的不可或缺的条件。与此同时，产品的核心在于其价值观，它是对使命和愿景的深思熟虑。对于团队未来的发展，通过对产品与项目进行可行性分析，从市场扫描开始，深入分析行业竞争对手，思考细分市场的本质。要明确目标用户是谁，我们要解决什么问题，满足什么需求。这样，我们才能够更全局地把握产品的发展方向，始终保持对市场的敏感性，在竞争激烈的市场中脱颖而出。</p>
<p>产品无处不在，只有当我们学会热爱生活时，才能真正领悟并珍视它们；积极主动地面对问题、培养自身主人翁意识，迎接挑战，才是成功的关键所在；理想的存在为生活注入了持久的动力，使其不再是每天枯燥乏味两点一线的生活；世界如此辽阔，从生活中寻找创意与灵感；沟通是一门艺术，沟通不是为了不是说服与圆滑处事，而是为了更好地认识世界，掌握一定的沟通技巧与沟通方法，明白解决问题的通用思路。这些既是一个产品经理的自我修养，同时也是日常生活的一种真实写照，书中所讲的不仅仅是方法，更是源于生活的经验。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>总的来说，《人人都是产品经理》是一本令人眼前一亮，感觉焕然一新，备受启发的一本书，与其说这一本关于产品经理的修炼指南，在我看来，这何尝又不是一本有关生活哲学的一次阐述，一个个例子，所讲的方法都能映射到生活之中；是有关产品的启迪之旅也是对生活小白、职场小白的启蒙之旅。如何以更智慧的方式对待挑战，如何在不断的学习中追求更高的境界。通过品味这些理念，我们可以更加从容地面对生活的起伏，也能更好地引领自己的职业航程。</p>
<p>在产品经理的世界里，我们是生活的创作者，每一个决策、每一次迭代都是独特而珍贵的。因此，让我们怀揣着对未知的好奇心，敞开心扉去接纳生活的种种可能。当我们学会热爱生活，当我们具备主人翁意识，当我们怀揣理想而充满动力，我们将在生活的舞台上演绎出属于自己的精彩篇章。</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>需求工程,生活随记</tag>
      </tags>
  </entry>
</search>
